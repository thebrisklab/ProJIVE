library(stats)
load("/Users/tyrone/Downloads/whas500.RData")
library(survival)
load("/Users/tyrone/Downloads/whas500.RData")
sur <-
library(survival)
load("/Users/tyrone/Downloads/whas500.RData")
sur <- Surv(whas500$lenfol, whas500$fstat)
cox <- coxph(sur ~ age + gender + hr + diasbp + bmi + sho + chf + year, data = whas500)
summary(cox)
martinres <- residuals(cox,type="martingale")
plot(x=whas500$age,y=martinres,
xlab="Age",ylab="Martingale residual")
lines(lowess(x=whas500$age,y=martinres),lty=2,col="red")
abline(h=0)
scaledres <- residuals(cox,type="scaledsch")
cox.zph(cox)
plot(cox.zph(cox))
install.packages("sos")
library(sos)
findFn("MatVar")
findFn("multiroot")
findFn("unique")
findFn("rbinom")
?matrix
library(mgcv)
gam <- gam(HIPPOCAMPUS_VOL~ DX + PTGENDER + APOE4 + s(AGE_VISIT) + s(PTEDUCAT),data = mcidata_cx)
load("/Users/tyrone/Downloads/MCI-2.RData")
mcidata$HIPPOCAMPUS_VOL=mcidata$HIPPOCAMPUS_VOL/1000
mcidata$APOE4 = factor(mcidata$APOE4)
mcidata = mcidata[complete.cases(mcidata),]
mcidata_cx = mcidata[!duplicated(mcidata$ID),]
library(mgcv)
gam <- gam(HIPPOCAMPUS_VOL~ DX + PTGENDER + APOE4 + s(AGE_VISIT) + s(PTEDUCAT),data = mcidata_cx)
summary(gam)
gam.check(gam)
max_k <- length(unique(mcidata_cx$PTEDUCAT))
gam_maxk <- gam(HIPPOCAMPUS_VOL~ DX + PTGENDER + APOE4 +
s(AGE_VISIT) + s(PTEDUCAT, k = max_k),
data = mcidata_cx)
gam.check(gam_maxk)
plot(gam, select = 1, rug = TRUE)
install.packages("itsadug")
library(itsadug)
plot_smooth(gam_model, view = "AGE_VISIT", rug = TRUE)
library(itsadug)
plot_smooth(gam, view = "AGE_VISIT", rug = TRUE)
library(itsadug)
plot_smooth(gam,  rug = TRUE)
library(itsadug)
plot_smooth(gam, view = "AGE_VISIT", rug = TRUE)
gam_cubic <- gam(HIPPOCAMPUS_VOL~ DX + PTGENDER + APOE4 + s(AGE_VISIT, bs = "cr", k = 10) +
s(PTEDUCAT, bs = "cr", k = 10), data = mcidata_cx)
summary(gam_cubic)
plot_smooth(gam_cubic, view = "AGE_VISIT", rug = TRUE, col = "blue")
plot_smooth(gam, view = "AGE_VISIT", rug = FALSE, add = TRUE, col = "red")
gam_reml <- gam(HIPPOCAMPUS_VOL~ DX + PTGENDER + APOE4 + s(AGE_VISIT) +
s(PTEDUCAT),data = mcidata_cx, method = "REML")
summary(gam_reml)
plot_smooth(gam_reml, view = "AGE_VISIT", rug = TRUE, col = "blue")
plot_smooth(gam, view = "AGE_VISIT", rug = FALSE, add = TRUE, col = "red")
plot_smooth(gam_reml, view = "AGE_VISIT", rug = TRUE, col = "blue")
plot_smooth(gam_reml, view = "AGE_VISIT", rug = FALSE, sim.ci = TRUE, add = TRUE, col = "red")
pred_59 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 59, PTEDUCAT = mean(mcidata_cx$PTEDU)
pred_60 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 60, PTEDUCAT = mean(mcidata_cx$PTEDU)
pred_59 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 59, PTEDUCAT = mean(mcidata_cx$PTEDU))
pred_60 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 60, PTEDUCAT = mean(mcidata_cx$PTEDU))
pred_59 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 59, PTEDUCAT = mean(mcidata_cx$PTEDUCAT))
pred_60 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 60, PTEDUCAT = mean(mcidata_cx$PTEDUCAT))
View(mcidata_cx)
?mean
pred_59 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 59, PTEDUCAT = mean(mcidata_cx$PTEDUCAT))
pred_60 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 60, PTEDUCAT = mean(mcidata_cx$PTEDUCAT))
pred_59 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 59, PTEDUCAT = mean(mcidata_cx$PTEDUCAT),
DX = 0, PTGENDER = "Male", APOE4 = "0"), type = "terms")[,"s(AGE_VISIT)"]
pred_60 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 60, PTEDUCAT = mean(mcidata_cx$PTEDUCAT),
DX = 0, PTGENDER = "Male", APOE4 = "0"), type = "terms")[,"s(AGE_VISIT)"]
ef = pred_60- pred_59
print(ef)
pred_59 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 80, PTEDUCAT = mean(mcidata_cx$PTEDUCAT),
DX = 0, PTGENDER = "Male", APOE4 = "0"), type = "terms")[,"s(AGE_VISIT)"]
pred_60 <- predict(gam_reml, newdata = data.frame(AGE_VISIT = 81, PTEDUCAT = mean(mcidata_cx$PTEDUCAT),
DX = 0, PTGENDER = "Male", APOE4 = "0"), type = "terms")[,"s(AGE_VISIT)"]
ef = pred_60- pred_59
print(ef)
gam_int <- gam(HIPPOCAMPUS_VOL~ DX + PTGENDER +
s(AGE_VISIT, by = APOE4) +
s(PTEDUCAT) +
APOE4,
data = mcidata_cx, method = "REML")
summary(gam_int)
gam.check(gam_int)
plot_smooth(gam_int, view = "AGE_VISIT", cond = list(APOE4 = "0"),rug = TRUE, sim.ci = TRUE, col = "blue")
plot_smooth(gam_int, view = "AGE_VISIT", cond = list(APOE4 = "1"),
rug = FALSE, sim.ci = TRUE, col = "red", add = TRUE)
plot_smooth(gam_int, view = "AGE_VISIT", cond = list(APOE4 = "2"),
rug = FALSE, sim.ci = TRUE, col = "green", add = TRUE)
plot_smooth(gam_int, view = "AGE_VISIT", cond = list(APOE4 = "0"),rug = TRUE, sim.ci = TRUE, col = "blue")
plot_smooth(gam_int, view = "AGE_VISIT", cond = list(APOE4 = "1"),
rug = FALSE, sim.ci = TRUE, col = "red", add = TRUE)
plot_smooth(gam_int, view = "AGE_VISIT", cond = list(APOE4 = "2"),
rug = FALSE, sim.ci = TRUE, col = "orange", add = TRUE)
pred_59 <- predict(gam_int, newdata = data.frame(
AGE_VISIT = 59, APOE4 = "0", DX = 0, PTGENDER = "Male", PTEDUCAT = mean(mcidata_cx$PTEDUCAT)
), type = "terms")[, "s(AGE_VISIT):APOE40"]
pred_60 <- predict(gam_int, newdata = data.frame(
AGE_VISIT = 60, APOE4 = "0", DX = 0, PTGENDER = "Male", PTEDUCAT = mean(mcidata_cx$PTEDUCAT)
), type = "terms")[, "s(AGE_VISIT):APOE40"]
de60 <- (pred_60- pred_59) / (60- 59)
pred_74 <- predict(gam_int, newdata = data.frame(
AGE_VISIT = 74, APOE4 = "0", DX = 0, PTGENDER = "Male", PTEDUCAT = mean(mcidata_cx$PTEDUCAT)
), type = "terms")[, "s(AGE_VISIT):APOE40"]
pred_75 <- predict(gam_int, newdata = data.frame(
AGE_VISIT = 75, APOE4 = "0", DX = 0, PTGENDER = "Male", PTEDUCAT = mean(mcidata_cx$PTEDUCAT)
), type = "terms")[, "s(AGE_VISIT):APOE40"]
de75 <- (pred_75- pred_74) / (75- 74)
print(de60)
print(de75)
pred_59_apoe2 <- predict(gam_int, newdata = data.frame(
AGE_VISIT = 59, APOE4 = "2", DX = 0, PTGENDER = "Male", PTEDUCAT = mean(mcidata_cx$PTEDUCAT)
), type = "terms")[, "s(AGE_VISIT):APOE42"]
pred_60_apoe2 <- predict(gam_int, newdata = data.frame(
AGE_VISIT = 60, APOE4 = "2", DX = 0, PTGENDER = "Male", PTEDUCAT = mean(mcidata_cx$PTEDUCAT)
), type = "terms")[, "s(AGE_VISIT):APOE42"]
de60_a <- (pred_60_apoe2- pred_59_apoe2) / (60- 59)
pred_74_apoe2 <- predict(gam_int, newdata = data.frame(
AGE_VISIT = 74, APOE4 = "2", DX = 0, PTGENDER = "Male", PTEDUCAT = mean(mcidata_cx$PTEDUCAT)
), type = "terms")[, "s(AGE_VISIT):APOE42"]
pred_75_apoe2 <- predict(gam_int, newdata = data.frame(
AGE_VISIT = 75, APOE4 = "2", DX = 0, PTGENDER = "Male", PTEDUCAT = mean(mcidata_cx$PTEDUCAT)
), type = "terms")[, "s(AGE_VISIT):APOE42"]
de75_a <- (pred_75_apoe2- pred_74_apoe2) / (75- 74)
print(de60_a)
print(de75_a)
anova(gam_int, test = "F")
lm <- lm(HIPPOCAMPUS_VOL~ DX + PTGENDER + APOE4 * AGE_VISIT + PTEDUCAT, data = mcidata_cx)
summary(lm_model)
lm <- lm(HIPPOCAMPUS_VOL~ DX + PTGENDER + APOE4 * AGE_VISIT + PTEDUCAT, data = mcidata_cx)
summary(lm)
anova(lm)
load("/Users/tyrone/Downloads/MCI_MRI.RData")
x_matrix <- as.matrix(x)
model <- glm(y ~ ., data = as.data.frame(x_matrix), family = binomial)
pca <- prcomp(x_matrix, center = TRUE, scale. = TRUE)
eigenvalues <- (pca$sdev)ˆ2
library(math)
pca <- prcomp(x_matrix, center = TRUE, scale. = TRUE)
eigenvalues <- (pca$sdev)^2
plot(eigenvalues, type = "b", xlab = "Principal Component",
ylab = "Eigenvalues", xaxt = "n")
eigenvalues20 <- (pca$sdev[1:20])ˆ2
eigenvalues20 <- (pca$sdev[1:20])^2
plot(eigenvalues20, type = "b", xlab = "PCA 1-20", ylab = "Eigenvalues")
variance_proportion <- (pca$sdev^2) / sum((pca$sdev)^2)
cumulative_variance <- cumsum(variance_proportion)
cumulative_variance[5]
comp <- which(cumulative_variance >= 0.90)[1]
print(comp)
library(ggplot2)
l1 <- pca$rotation[, 1]
l2 <- pca$rotation[, 2]
plot <- data.frame(PCA1 = l1, PCA2 = l2, Label = labels)
ggplot(plot, aes(x = PCA1, y = PCA2, color = Label)) +
geom_point(size = 3) +
labs(x = "PC1 Loadings", y = "PC2 Loadings") +
theme_minimal()
l1 <- pca$rotation[, 1]
l2 <- pca$rotation[, 2]
plot <- data.frame(PCA1 = l1, PCA2 = l2, Label = labels)
ggplot(plot, aes(x = PCA1, y = PCA2, color = Label)) +
geom_point(size = 3) +
labs(x = "PC1 Loadings", y = "PC2 Loadings")
l1 <- pca$rotation[, 1]
l2 <- pca$rotation[, 2]
plot <- data.frame(PCA1 = l1, PCA2 = l2, Label = labels)
ggplot(plot, aes(x = PCA1, y = PCA2, color = Label)) +
geom_point() +
labs(x = "PC1 Loadings", y = "PC2 Loadings")
scores <- pca$x[, 1:5]
pca_data <- data.frame(Diagnosis = y, PCA1 = scores[, 1], PCA2 = scores[, 2], PCA3 = scores[, 3], PCA4 = scores[, 4], PCA5 = scores[, 5])
pca_model <- glm(Diagnosis~ PCA1 + PCA2 + PCA3 + PCA4 + PCA5, data = pca_data, family = binomial)
summary(pca_model)
loadings <- pca_result$rotation[, 2]
loadings <- pca$rotation[, 2]
if (max(abs(loadings)) < 0) {
loadings <- -loadings
}
plot <- data.frame(Index = 1:length(loadings), Loadings = loadings, Label = labels)
ggplot(plot, aes(x = Index, y = Loadings, color = Label)) +
geom_point(size = 5) +
labs(title = paste("Loadings of PC", significant_component, sep = ""),
x = "Index",
y = "Loadings") +
theme_minimal()
loadings <- pca$rotation[, 2]
if (max(abs(loadings)) < 0) {
loadings <- -loadings
}
plot <- data.frame(Index = 1:length(loadings), Loadings = loadings, Label = labels)
ggplot(plot, aes(x = Index, y = Loadings, color = Label)) +
geom_point(size = 5) +
labs(title = paste("Loadings of PC", 2, sep = ""),
x = "Index",
y = "Loadings") +
theme_minimal()
loadings <- pca$rotation[, 2]
if (max(abs(loadings)) < 0) {
loadings <- -loadings
}
plot <- data.frame(Index = 1:length(loadings), Loadings = loadings, Label = labels)
ggplot(plot, aes(x = Index, y = Loadings, color = Label)) +
geom_point() +
labs(title = paste("Loadings of PC", 2, sep = ""),
x = "Index",
y = "Loadings")
loadings <- pca$rotation[, 2]
if (max(abs(loadings)) < 0) {
loadings <- -loadings
}
plot <- data.frame(Index = 1:length(loadings), Loadings = loadings, Label = labels)
ggplot(plot, aes(x = Index, y = Loadings, color = Label)) +
geom_point() +
labs(title = "Loadings of PC2",
x = "Index",
y = "Loadings")
library(car)
pca_model <- glm(Diagnosis~ PCA1 + PCA2 + PCA3 + PCA4 + PCA5, data = pca_data, family = binomial)
vif <- vif(pca_model)
print(vif)
install.packages("glmnet")
library(glmnet)
lasso <- glmnet(x_matrix, y, family = "binomial", alpha = 1)
plot(lasso, xvar = "lambda", label = TRUE)
set.seed(777)
lasso <- cv.glmnet(x_matrix, y, family = "binomial", alpha = 1, nfolds = 10)
plot(lasso)
coe <- coef(lasso, s = "lambda.min")
coe_no_intercept <- coe[-1, ]
plot_data <- data.frame(Index = 1:length(coe_no_intercept),
coef = as.numeric(coe_no_intercept), Label = labels)
ggplot(plot_data, aes(x = Index, y = coef, color = Label)) +
geom_point(size = 3) +
labs(title = "Coefficients at Lambda Min", x = "Index", y = "Coefficient") +
theme_minimal()
coe <- coef(lasso, s = "lambda.min")
coe_no_intercept <- coe[-1, ]
plot_data <- data.frame(Index = 1:length(coe_no_intercept),
coef = as.numeric(coe_no_intercept), Label = labels)
ggplot(plot_data, aes(x = Index, y = coef, color = Label)) +
geom_point() +
labs(x = "Index", y = "Coefficient")
coe_non_0 <- coef(lasso, s = "lambda.min")
non_0 <- sum(coe_non_0 != 0)- 1 # Subtract 1 to exclude the intercept
print(non_0)
largest_coe_index <- which.max(abs(coe_no_intercept))
largest_coe <- coe_no_intercept[largest_coe_index]
var_name <- rownames(coe_non_0)[largest_coe_index + 1]
print(var_name)
odds_ratio <- exp(largest_coe)
odds_ratio
set.seed(123)
lasso_2 <- cv.glmnet(x_matrix, y, family = "binomial", alpha = 1, nfolds = 10)
plot(lasso_2)
set.seed(123)
lasso_2 <- cv.glmnet(x_matrix, y, family = "binomial", alpha = 1, nfolds = 10)
plot(lasso_2)
lasso_2$lambda.min
net <- glmnet(x_matrix, y, family = "binomial", alpha = 0.5)
plot(net, xvar = "lambda", label = TRUE)
set.seed(777)
cv_net <- cv.glmnet(x_matrix, y, family = "binomial", alpha = 0.5, nfolds = 10)
plot(cv_net)
net_coe <- coef(cv_elastic_net, s = "lambda.min")
net_coe <- coef(cv_net, s = "lambda.min")
net_coe_noint <- net_coe[-1, ]
plot <- data.frame(
Index = 1:length(net_coe_noint),
Coefficients = as.numeric(net_coe_noint),
Label = labels
)
ggplot(plot, aes(x = Index, y = Coefficients, color = Label)) +
geom_point() +
labs(x = "Index", y = "Coefficient")
non_0 <- sum(net_coe != 0)- 1
print(non_0)
net_coe_1se <- coef(cv_elastic_net, s = "lambda.1se")
net_coe_1se <- coef(cv_net, s = "lambda.1se")
net_coe_1se_noint <- net_coe_1se[-1, ]
plot <- data.frame(
Index = 1:length(net_coe_1se_noint),
Coefficients = as.numeric(net_coe_1se_noint),
Label = labels
)
ggplot(plot, aes(x = Index, y = Coefficients, color = Label)) +
geom_point(size = 5) +
labs(title = "Elastic Net Coefficients at Lambda.1se", x = "Index", y = "Coefficient") +
theme_minimal()
net_coe_1se <- coef(cv_net, s = "lambda.1se")
net_coe_1se_noint <- net_coe_1se[-1, ]
plot <- data.frame(
Index = 1:length(net_coe_1se_noint),
Coefficients = as.numeric(net_coe_1se_noint),
Label = labels
)
ggplot(plot, aes(x = Index, y = Coefficients, color = Label)) +
geom_point() +
labs(x = "Index", y = "Coefficient")
largest_coe_index <- which.max(abs(net_coe_1se_noint))
largest_coe <- net_coe_1se_noint[largest_coef_index]
largest_coe_index <- which.max(abs(net_coe_1se_noint))
largest_coe <- net_coe_1se_noint[largest_coe_index]
variable_name <- rownames(net_coe_1se)[largest_coe_index + 1]
odds_ratio <- exp(largest_coef)
largest_coe_index <- which.max(abs(net_coe_1se_noint))
largest_coe <- net_coe_1se_noint[largest_coe_index]
variable_name <- rownames(net_coe_1se)[largest_coe_index + 1]
odds_ratio <- exp(largest_coe)
print(odds_ratio)
selected_coe <- as.matrix(coef(cv_net, s = "lambda.1se"))
selected_var <- rownames(selected_coe)[selected_coe != 0]
selected_var <- selected_var[selected_var != "(Intercept)"]
x_selected <- x_matrix[, selected_var, drop = FALSE]
glm <- glm(y ~ ., data = as.data.frame(x_selected), family = binomial)
summary(glm)
coe_glm <- summary(glm_model)$coefficients
coe_glm <- summary(glm)$coefficients
coe_interest <--0.78554097
odds_ratio <- exp(coe_interest)
print(odds_ratio)
View(coe_glm)
summary(glm)$coefficients
coe_interest <--0.78554097
odds_ratio <- exp(coe_interest)
print(odds_ratio)
load('/Users/tyrone/Desktop/Fall 2024/BIOS 522/HW 9-11/dat.Rdata')
library(survival)
dat$start <- as.numeric(dat$start)
dat$end <- as.numeric(dat$end)
kaplan <- survfit(Surv(time = start, time2 = end, event = status)~1, data = dat)
summary(kaplan)
summary(kaplan)$table["median"]
#b
kaplan_n <- survfit(Surv(time = end, event = status)~1, data = dat)
summary(kaplan_n)$table["median"]
library(sos)
?dmvnorm
findFn(dmvnorm)
findFn("dmvnorm")
findFn("cc.jive")
findFn("rnorm")
?rnorm
library(devtools)
use_r("ProJIVE_AsymVar")
devtools::load_all(".")
?GenerateToyData
devtools::load_all(".")
?GenerateToyData
devtools::load_all(".")
?GenerateToyData
W = matrix(c(1,0,0,0,2,0,0,0,0,
3,0,0,0,0,0,0,0,4),6,3,byrow = TRUE)
View(W)
# W = matrix(c(2,4,0,1,0,0,0,2,0,
#              3,0,2,0,0,1,4,0,0),6,3,byrow = TRUE)
sigmasq1 = 1
sigmasq2 = 2
nobs=100
theta = matrix(rnorm(n=nobs*3),nrow=nobs)
errors = cbind(matrix(sqrt(sigmasq1)*rnorm(n=nobs*3),nrow=nobs),matrix(sqrt(sigmasq2)*rnorm(n=nobs*3),nrow=nobs))
simdata = theta%*%t(W)+errors
View(simdata)
################
PJIVE.res = ProJIVE_EM(Y=simdata, P=c(3,3), Q=c(1,1,1), Max.iter=10000, diff.tol=1e-7, sig_hat = "MLE", init.loads = "AJIVE")
library(singR); library(CJIVE); library(reticulate)
################
PJIVE.res = ProJIVE_EM(Y=simdata, P=c(3,3), Q=c(1,1,1), Max.iter=10000, diff.tol=1e-7, sig_hat = "MLE", init.loads = "AJIVE")
round(PJIVE.res$LoadingMatrix,2)
help(package = "PJIVA")
?PIIVA
?PJIVA
devtools::load_all(".")
help(package = "PJIVA")
?PJIVA
?GenerateToyData
require(CJIVE)
source("Functions_for_PJIVE.R")
set.seed(0)
# Sample size
n = 1000
# Number of features per block (input as a vector)
p1 = 20
p2 = 200
# Joint Rank
r.J = 3
# Individual rank for each block (input as a vector)
r.I1 = 2
r.I2 = 2
# Proportions of joint variation explained (input as a vector)
JntVarEx1 = 0.05
JntVarEx2 = 0.5
# Proportions of individual variation explained (input as a vector)
IndVarEx1 = 0.25
IndVarEx2 = 0.25
true_signal_ranks = r.J + c(r.I1,r.I2)                          ##true ranks of overall signals
layout(matrix(1:4, nrow = 2))
ToyDat = GenerateToyData(n = n, p = c(p1, p2), JntVarEx = c(JntVarEx1, JntVarEx2),
IndVarEx = c(IndVarEx1, IndVarEx2), jnt_rank = r.J,
equal.eig = F, ind_rank = c(r.I1, r.I2), JntVarAdj = T, SVD.plots = T,
Error = T, print.cor = T, Loads = "Rademacher", Scores = "Gaussian")
layout(1)
View(ToyDat)
ToyDat[["Data Components"]]
use_data(ToyDat)
use_r("data")
use_vignette("Intro_to_ProJIVA", title = "Introduction to ProJIVA")
library(devtools)
use_r("pmse.2")
use_r("pmse")
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
file.rename("vignettes/Intro_to_ProJIVA.Rmd", "vignettes/Intro_to_ProJIVE.Rmd")
devtools::load_all(".")
devtools::load_all(".")
?AdjSigVarExp
devtools::load_all(".")
?AdjSigVarExp
devtools::load_all(".")
?AdjSigVarExp
devtools::load_all(".")
?AdjSigVarExp
?ProJIVE_AsymVar
devtools::load_all(".")
?Bootstrap
?ProJIVE_BootsratVar
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?ProJIVE_EM
devtools::load_all(".")
?ProJIVE_AsymVar
devtools::load_all(".")
?ProJIVE_AsymVar
devtools::load_all(".")
?GenerateToyData
devtools::load_all(".")
devtools::load_all(".")
library(PJIVE)
rep_number = 1
r.J = 3
r.I1 = 2
r.I2 = 2
#outdir = args[2]
n = 1000
p1 = 20
p2 = 200 ####Note that p1 and p2 differ when compared to values used in simulations
JntVarEx1 = 0.1
JntVarEx2 = 0.1
#files = list.files(outdir)
IndVarEx1 = 0.25
IndVarEx2 = 0.25
nparams = p1*(r.J+r.I1)+p2*(r.J+r.I2)+2
prop = n/nparams
set.seed(rep_number) ##To ensure that any randomized processes give the same results each time
JntScores = matrix(rdunif(n*r.J, 0, 5), nrow = n, ncol = r.J)
install.packages("randtoolbox")
library(randtoolbox)
set.seed(rep_number) ##To ensure that any randomized processes give the same results each time
JntScores = matrix(rdunif(n*r.J, 0, 5), nrow = n, ncol = r.J)
set.seed(rep_number) ##To ensure that any randomized processes give the same results each time
JntScores = matrix(rdunif(n*r.J, 0, 5), nrow = n, ncol = r.J)
install.packages("Rlab")
library(Rlab)
set.seed(rep_number) ##To ensure that any randomized processes give the same results each time
JntScores = matrix(rdunif(n*r.J, 0, 5), nrow = n, ncol = r.J)
library(extraDistr)
set.seed(rep_number) ##To ensure that any randomized processes give the same results each time
JntScores = matrix(rdunif(n*r.J, 0, 5), nrow = n, ncol = r.J)
IndivScore.X = matrix(rweibull(n*r.I1, shape = 1), nrow = n)
IndivScore.Y = matrix(rhnorm(n*r.I2), nrow = n)
Scores = cbind(JntScores, IndivScore.X, IndivScore.Y)
??rdunif
devtools::load_all(".")
?GenerateToyData
devtools::load_all(".")
?GenerateToyData
devtools::check()
find("rdunif")
help.search("rdunif")
library(extraDistr)
devtools::load_all(".")
devtools::check()
??MatVar
devtools::load_all(".")
check()
devtools::check()
devtools::load_all(".")
devtools::check()
.Last.error
args(GenerateToyData)
devtools::build_vignettes()
devtools::build_vignettes()
ToyDat <- GenerateToyData(n = 100, p = c(20, 30), JntVarEx = c(0.1, 0.2),
IndVarEx = c(0.2, 0.3), jnt_rank = 2,
ind_ranks = c(2, 3), equal.eig = FALSE,
JntVarAdj = FALSE, SVD.plots = FALSE,
Error = TRUE, print.cor = TRUE,
Loads = "Rademacher", Scores = "Gaussian_Mixture",
error.variances = c(1,1))
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
